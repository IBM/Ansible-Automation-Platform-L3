{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ACKNOWLEDGEMENTS Special thanks to Stephan Navarro for authoring the original version of this hands-on lab, \"Deploying WebSphere Application Server on AIX using Ansible Automation\" for IBM Client Engineering for Systems (Montpellier). In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . Automation of nearly any infrastructure endpoint using minimal amounts of code has immense practical value to a world increasingly dependent on clouds operated by different vendors, in varying countries, across multiple premises. Implementation of modern automation solutions can likewise translate to a number of benefits for businesses of every size: reduced storage and resource burden placed on the machines to be automated; a much smaller footprint on these endpoints that could be hacked or exploited by malicious users; and most importantly, a greatly simplified approach to automation in general. As environments change and operating systems advance over time, the automation jobs underway and supported by these technologies can be easily modified in lockstep as well. Adaptability and extensibility are key ingredients in the longevity of any technology \u2014 and fortunately, the automation tooling for the hybrid multicloud era has those in abundance. Red Hat Ansible Automation Platform (AAP) commodifies the automation of everything else that applications, services, and containers need to run upon. That may include infrastructure provisioning, server deployments, IoT edge devices, script execution, and lots of other things that operations teams spend their time doing to \u201ckeep the lights on.\u201d AAP makes automation available to everyone with the lightest touch of human-readable snippets of code. TERMINOLOGY Ansible and AAP may be used interchangeably \u2014 and will be throughout the course of this lab work. Who uses AAP today? Many different and potentially siloed personas: IT Operators : These include automation administrators responsible for ensuring that the automation platform is available to developers and implementors upstream within the organization. These individuals are generally concerned with the uptime of the automation platform, as any interruptions to service availability can directly impact upstream users. Platform Developers : These individuals are the automation \"plumbers\" who ensure that endpoints are viable for automation. Tasks and responsibilities include maintaining the AAP modules, plugins, and the Roles (content) to be used by platform users. They are the domain experts that are coding up collections which can later be extended or consumed by the end-users of the automation jobs. Platform Users : These are the automation \"writers,\" stitching together each automation task\u2014 play by play, task by task \u2014using content generated by the Platform Developers within their Playbooks. Essentially, this is configuration management applied to the operations of IT estates. Instead of having a hardcoded script that instructs exactly how to move from task A to task B, you are creating a Playbook that lays out the expected end state and asks AAP to figure out the delta between the current and end state. But critically, AAP will not move on to task B until all of the conditions required by task A have been satisfied. This is not only invaluable for debugging purposes; it also guarantees a consistency and predictability to how AAP's automation tasks will be performed \u2014 something that you will come to keenly appreciate throughout this hands-on material, as we incrementally add more tasks and automation jobs to Playbooks for execution. Together, these qualities have two profound implications for AAP clients. First, it removes any ambiguity from the automation process: AAP will execute your instructions in exactly the order you\u2019ve assigned. Second, it places the burden of deciding how to achieve the end states of tasks A and B on the automation engine itself, rather than requiring the user to explicitly define all the gory details themselves. When automation is made available to everyone, it becomes possible to automate everything. The series of hands-on tutorials and learning modules embedded in this Level 3 course are designed to provide IBM Sellers, IBM Technical Sellers, and Business Partners with the fluency to gain trusted advisor status with clients and the expertise to tailor live technological demonstrations for customers. Throughout Red Hat Ansible Automation Platform Level 3 for Sales and Technical Sales , you will utilize AAP in conjunction with IBM Power Systems infrastructure (PowerVC) to generate an IBM AIX-based virtual machine; subsequently, Ansible automation will be used to install and deploy a live WebSphere Application Server instance inside of the virtual machine. The various ways in which AAP's automation can also be applied to operational and administrative tasks\u2014 such as modifying root user characteristics, setting filesystem sizes, installing pre-requisites drivers and libraries, as well as software deployments \u2014will also be explored. All modules are accompanied by recordings and narrated instructions, delivered by your team of authors. It is strongly recommended that IBM Sellers and Technical Sellers watch these recordings, as they will be useful for you as you go about creating and recording your own Stand & Deliver presentations for Level 3 accreditation. LEVEL 3 ACCREDITATION To receive Level 3 accreditation, IBMers and Business Partners must demonstrate mastery of the skills learned throughout the various modules of these hands-on labs and coursework. Level 3 accreditation requirements\u2014 and the way in which participants will be evaluated before receiving accreditation \u2014differs depending on job role. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. IBM Sales and Technical Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to achieve. The recording must cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered in this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course . LOOKING FOR COURSEWORK? The material covered in this hands-on lab is part of accredited learning and badging for IBMers and business partners. Shortcuts to the respective learning plans are available below: IBM | Sellers | Technical Sellers Business Partners | Sellers | Technical Sellers","title":"Introduction"},{"location":"#_1","text":"","title":""},{"location":"#red-hat-ansible-automation-platform-aap-commodifies-the-automation-of-everything-else-that-applications-services-and-containers-need-to-run-upon","text":"That may include infrastructure provisioning, server deployments, IoT edge devices, script execution, and lots of other things that operations teams spend their time doing to \u201ckeep the lights on.\u201d AAP makes automation available to everyone with the lightest touch of human-readable snippets of code. TERMINOLOGY Ansible and AAP may be used interchangeably \u2014 and will be throughout the course of this lab work. Who uses AAP today? Many different and potentially siloed personas: IT Operators : These include automation administrators responsible for ensuring that the automation platform is available to developers and implementors upstream within the organization. These individuals are generally concerned with the uptime of the automation platform, as any interruptions to service availability can directly impact upstream users. Platform Developers : These individuals are the automation \"plumbers\" who ensure that endpoints are viable for automation. Tasks and responsibilities include maintaining the AAP modules, plugins, and the Roles (content) to be used by platform users. They are the domain experts that are coding up collections which can later be extended or consumed by the end-users of the automation jobs. Platform Users : These are the automation \"writers,\" stitching together each automation task\u2014 play by play, task by task \u2014using content generated by the Platform Developers within their Playbooks. Essentially, this is configuration management applied to the operations of IT estates. Instead of having a hardcoded script that instructs exactly how to move from task A to task B, you are creating a Playbook that lays out the expected end state and asks AAP to figure out the delta between the current and end state. But critically, AAP will not move on to task B until all of the conditions required by task A have been satisfied. This is not only invaluable for debugging purposes; it also guarantees a consistency and predictability to how AAP's automation tasks will be performed \u2014 something that you will come to keenly appreciate throughout this hands-on material, as we incrementally add more tasks and automation jobs to Playbooks for execution. Together, these qualities have two profound implications for AAP clients. First, it removes any ambiguity from the automation process: AAP will execute your instructions in exactly the order you\u2019ve assigned. Second, it places the burden of deciding how to achieve the end states of tasks A and B on the automation engine itself, rather than requiring the user to explicitly define all the gory details themselves.","title":"Red Hat Ansible Automation Platform (AAP) commodifies the automation of everything else that applications, services, and containers need to run upon."},{"location":"#_2","text":"","title":""},{"location":"#when-automation-is-made-available-to-everyone-it-becomes-possible-to-automate-everything","text":"The series of hands-on tutorials and learning modules embedded in this Level 3 course are designed to provide IBM Sellers, IBM Technical Sellers, and Business Partners with the fluency to gain trusted advisor status with clients and the expertise to tailor live technological demonstrations for customers. Throughout Red Hat Ansible Automation Platform Level 3 for Sales and Technical Sales , you will utilize AAP in conjunction with IBM Power Systems infrastructure (PowerVC) to generate an IBM AIX-based virtual machine; subsequently, Ansible automation will be used to install and deploy a live WebSphere Application Server instance inside of the virtual machine. The various ways in which AAP's automation can also be applied to operational and administrative tasks\u2014 such as modifying root user characteristics, setting filesystem sizes, installing pre-requisites drivers and libraries, as well as software deployments \u2014will also be explored. All modules are accompanied by recordings and narrated instructions, delivered by your team of authors. It is strongly recommended that IBM Sellers and Technical Sellers watch these recordings, as they will be useful for you as you go about creating and recording your own Stand & Deliver presentations for Level 3 accreditation. LEVEL 3 ACCREDITATION To receive Level 3 accreditation, IBMers and Business Partners must demonstrate mastery of the skills learned throughout the various modules of these hands-on labs and coursework. Level 3 accreditation requirements\u2014 and the way in which participants will be evaluated before receiving accreditation \u2014differs depending on job role. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. IBM Sales and Technical Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to achieve. The recording must cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered in this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course . LOOKING FOR COURSEWORK? The material covered in this hands-on lab is part of accredited learning and badging for IBMers and business partners. Shortcuts to the respective learning plans are available below: IBM | Sellers | Technical Sellers Business Partners | Sellers | Technical Sellers","title":"When automation is made available to everyone, it becomes possible to automate everything."},{"location":"Part%201/01%20Getting%20Started/","text":"Reserving an environment IBM TECHNOLOGY ZONE You will require access to the IBM Technology Zone (ITZ) in order to reserve your environment and complete the hands-on training. If you do not yet have access or an account with the ITZ, you may register for one by visiting the following page: https://techzone.ibm.com The hands-on environment can be provisioned free-of-charge using the reservation portal: https://techzone.ibm.com/collection/deploying-red-hat-ansible-on-ibm-power-with-aix/environments Reservations take approximately 15-20 minutes to provision and deploy. MULTIPLE ENVIRONMENT TEMPLATES IBM Technology Zone may display multiple configurations to choose from. Select the template that matches the screenshot above and continue with the reservation steps as documented. You may select the option to Reserve now (recommended) or Schedule for later . In order to complete your ITZ reservation of the PowerVC infrastructure, you must supply the following information: Name : Give your reservation a unique name. Purpose : Set to Practice / Self-Education and affirm that the environment will not be used with customer data. Purpose Description : Provide a brief summary of how the environment will be used. Preferred Geography : Montpellier, France Start Date & Time : Select the time and date for when you plan to begin work on the hands-on material. End Date & Time : Select a time and date for when the reservation will expire. By default, Tech Zone will set the default duration to 2 hours. It is recommended you set your End Time to the maximum duration of 4 hours, after which it will automatically expire and de-provision. When satisfied, click the Check Availability button at the bottom of the page to verify that resources are available for your requested time slot. If the check passes, you can finalize your reservation request by clicking Submit . Access your ITZ reservation As a reminder, reservations take approximately 15-20 minutes to complete from the time that you click submit. If you navigate to the My Reservations tab of the ITZ ( https://techzone.ibm.com/my/reservations ), you can monitor the progress of your reservation. WAIT UNTIL READY Wait for the Tech Zone reservation to be marked as \" Ready \" before attempting to start the lab \u2014 accessing it too soon will lead to issues (or an outright failure) when connecting to the PowerVC instance. You will also receive an email to your inbox once the environment has successfully deployed, as shown here. The \"Your environment is ready\" email contains links back to the My Reservations tab, which now is populated with all of the details needed to access your PowerVC environment \u2014 hostnames, addresses, login information, and so on. Navigate to the page, which should look similar to the following screenshot. Note that your environment's details will differ. There are several critical pieces of information that you should record at this time, as they will be referenced again repeatedly in the steps to come. Save these values (unique to your environment) to a notepad: User Account : This will be cecuser for all environments. User Password : Unique to your environment. Use the clipboard icon to copy. VM 1 IP Address VM 2 IP Address VM 3 IP Address The three virtual machines (VMs) will correspond to the Ansible AIX host and server nodes once Ansible has been installed and deployed across the cluster. Connecting to the environment over SSH VPN ACCESS IBM employees and business partners will need to be connected to the IBM intranet via VPN in order to remotely SSH into the PowerVC cluster. If you are not connected via VPN, the connection attempt will time out. SSH and PuTTY - WINDOWS USERS For detailed instructions on how to connect with PuTTY on Windows, reference the linked material. You now have all the necessary information to remotely connect over SSH to the PowerVC cluster. To connect via SSH, it is recommended that you use Terminal (MacOS) or PuTTY (Windows). Connect via SSH using the following command: ssh UserAccount@VM1IPAddress Replace the UserAccount with the User Account ( cecuser ) recorded earlier. Similarly, replace the VM1IPAddress field with the IP address of VM 1 recorded earlier \u2014 use the value unique to your ITZ reservation ). Press return and wait until you are prompted to provide a password : supply the User Password value recorded earlier. Hit Return and wait for the connection to complete. If successful, your console will now be connected directly to the PowerVC cluster. Setting up a VPN The second \"Demo VPN Ready Notification\" email is the next order of business. You will need to configure a special VPN tunnel in order to connect to the demo PowerVC environment. From the \"Demo VPN Ready Notification\" email, locate the \"Click Here\" hyperlink to download your OpenVPN certificate , which is unique to your account and environment. This certificate will only need to be downloaded and set up once; in the event that you need to re-provision a new environment at a later time, it won't be necessary to repeat these steps. Further down in the email are three links for setting up OpenVPN for each of the major operating systems: Windows, Linux, and MacOS. CLIENT SELECTION It is recommended that you use Tunnelblick if using running MacOS, but you have the option of selecting from other OpenVPN clients if you prefer. Download the latest Tunnelblick client ( v3.8.7a or later) to your local machine and run the installer. Click Continue when prompted to do so, as shown below. After the initial setup, Tunnelblick will prompt you to answer \"I have configuration files\" (or not). Select the first highlighted option as shown. Along the taskbar at the top of your desktop, an icon for Tunnelblick will now be visible. Click the icon to pull down a menu of options \u2014 select the VPN Details... button. The full Tunnelblick interface will open. Locate the OpenVPN certificate you downloaded earlier (it will have a filename similar to VPN_DcUser13097_20221011201513.psscopenvpn.ovpn ) and DRAG the certificate over the Tunnelblick interface (as shown). Alternatively, you can also drag it directly on top of the Tunnelblick icon located in the desktop taskbar. Release the certificate on top of the Tunnelblick app to add the OpenVPN certificate to configure Tunnelblick to use the connection. You will be prompted to \"Install Configuration for All Users?\" to which you must select the ALL USERS option. The OpenVPN connection will now display among the list of configurations. In the bottom-right corner of the Tunnelblick interface, click the Connect button. Wait for the connection to be established. You may receive a pair of warnings \u2014 which you can safely ignore. After connecting, you will be able to access the PowerVC GUI and SSH remotely into your PowerVC environment. Return to the \"Demo Ready Notification\" email (or the My Reservations tab on the ITZ) and follow the URL to your unique Project Kit page, similar to the one captured in the screenshot below. The Project Kit summarizes all of the relevant connection information you will need to access your PowerVC and Ansible environment. Scroll down the page until you reach the Usage Instructions table near the bottom of the page. The table contains two relevant rows: the first row \"PowerVC GUI\" contains information on how to connect to the PowerVC infrastructure; the second row \"Ansible ssh console\" details how to remotely connect to Ansible via SSH. You will be making use of both endpoints throughout the lab. As such, it's recommended that you copy for future reference the URLs for both the GUI and Ansible endpoints (note that they have different host addresses), as well as the userID and password values (they are identical across both environments). pwd Then check to see which version of Ansible the controller node is currently running: ansible --version Everything's now set and in good shape for you to get to work on deploying your first virtual machine via Ansible on to the PowerVC infrastructure.","title":"Getting Started"},{"location":"Part%201/01%20Getting%20Started/#_1","text":"","title":""},{"location":"Part%201/01%20Getting%20Started/#reserving-an-environment","text":"IBM TECHNOLOGY ZONE You will require access to the IBM Technology Zone (ITZ) in order to reserve your environment and complete the hands-on training. If you do not yet have access or an account with the ITZ, you may register for one by visiting the following page: https://techzone.ibm.com The hands-on environment can be provisioned free-of-charge using the reservation portal: https://techzone.ibm.com/collection/deploying-red-hat-ansible-on-ibm-power-with-aix/environments Reservations take approximately 15-20 minutes to provision and deploy. MULTIPLE ENVIRONMENT TEMPLATES IBM Technology Zone may display multiple configurations to choose from. Select the template that matches the screenshot above and continue with the reservation steps as documented. You may select the option to Reserve now (recommended) or Schedule for later . In order to complete your ITZ reservation of the PowerVC infrastructure, you must supply the following information: Name : Give your reservation a unique name. Purpose : Set to Practice / Self-Education and affirm that the environment will not be used with customer data. Purpose Description : Provide a brief summary of how the environment will be used. Preferred Geography : Montpellier, France Start Date & Time : Select the time and date for when you plan to begin work on the hands-on material. End Date & Time : Select a time and date for when the reservation will expire. By default, Tech Zone will set the default duration to 2 hours. It is recommended you set your End Time to the maximum duration of 4 hours, after which it will automatically expire and de-provision. When satisfied, click the Check Availability button at the bottom of the page to verify that resources are available for your requested time slot. If the check passes, you can finalize your reservation request by clicking Submit .","title":"Reserving an environment"},{"location":"Part%201/01%20Getting%20Started/#_2","text":"","title":""},{"location":"Part%201/01%20Getting%20Started/#access-your-itz-reservation","text":"As a reminder, reservations take approximately 15-20 minutes to complete from the time that you click submit. If you navigate to the My Reservations tab of the ITZ ( https://techzone.ibm.com/my/reservations ), you can monitor the progress of your reservation. WAIT UNTIL READY Wait for the Tech Zone reservation to be marked as \" Ready \" before attempting to start the lab \u2014 accessing it too soon will lead to issues (or an outright failure) when connecting to the PowerVC instance. You will also receive an email to your inbox once the environment has successfully deployed, as shown here. The \"Your environment is ready\" email contains links back to the My Reservations tab, which now is populated with all of the details needed to access your PowerVC environment \u2014 hostnames, addresses, login information, and so on. Navigate to the page, which should look similar to the following screenshot. Note that your environment's details will differ. There are several critical pieces of information that you should record at this time, as they will be referenced again repeatedly in the steps to come. Save these values (unique to your environment) to a notepad: User Account : This will be cecuser for all environments. User Password : Unique to your environment. Use the clipboard icon to copy. VM 1 IP Address VM 2 IP Address VM 3 IP Address The three virtual machines (VMs) will correspond to the Ansible AIX host and server nodes once Ansible has been installed and deployed across the cluster.","title":"Access your ITZ reservation"},{"location":"Part%201/01%20Getting%20Started/#_3","text":"","title":""},{"location":"Part%201/01%20Getting%20Started/#connecting-to-the-environment-over-ssh","text":"VPN ACCESS IBM employees and business partners will need to be connected to the IBM intranet via VPN in order to remotely SSH into the PowerVC cluster. If you are not connected via VPN, the connection attempt will time out. SSH and PuTTY - WINDOWS USERS For detailed instructions on how to connect with PuTTY on Windows, reference the linked material. You now have all the necessary information to remotely connect over SSH to the PowerVC cluster. To connect via SSH, it is recommended that you use Terminal (MacOS) or PuTTY (Windows). Connect via SSH using the following command: ssh UserAccount@VM1IPAddress Replace the UserAccount with the User Account ( cecuser ) recorded earlier. Similarly, replace the VM1IPAddress field with the IP address of VM 1 recorded earlier \u2014 use the value unique to your ITZ reservation ). Press return and wait until you are prompted to provide a password : supply the User Password value recorded earlier. Hit Return and wait for the connection to complete. If successful, your console will now be connected directly to the PowerVC cluster.","title":"Connecting to the environment over SSH"},{"location":"Part%201/01%20Getting%20Started/#_4","text":"","title":""},{"location":"Part%201/01%20Getting%20Started/#setting-up-a-vpn","text":"The second \"Demo VPN Ready Notification\" email is the next order of business. You will need to configure a special VPN tunnel in order to connect to the demo PowerVC environment. From the \"Demo VPN Ready Notification\" email, locate the \"Click Here\" hyperlink to download your OpenVPN certificate , which is unique to your account and environment. This certificate will only need to be downloaded and set up once; in the event that you need to re-provision a new environment at a later time, it won't be necessary to repeat these steps. Further down in the email are three links for setting up OpenVPN for each of the major operating systems: Windows, Linux, and MacOS. CLIENT SELECTION It is recommended that you use Tunnelblick if using running MacOS, but you have the option of selecting from other OpenVPN clients if you prefer. Download the latest Tunnelblick client ( v3.8.7a or later) to your local machine and run the installer. Click Continue when prompted to do so, as shown below. After the initial setup, Tunnelblick will prompt you to answer \"I have configuration files\" (or not). Select the first highlighted option as shown. Along the taskbar at the top of your desktop, an icon for Tunnelblick will now be visible. Click the icon to pull down a menu of options \u2014 select the VPN Details... button. The full Tunnelblick interface will open. Locate the OpenVPN certificate you downloaded earlier (it will have a filename similar to VPN_DcUser13097_20221011201513.psscopenvpn.ovpn ) and DRAG the certificate over the Tunnelblick interface (as shown). Alternatively, you can also drag it directly on top of the Tunnelblick icon located in the desktop taskbar. Release the certificate on top of the Tunnelblick app to add the OpenVPN certificate to configure Tunnelblick to use the connection. You will be prompted to \"Install Configuration for All Users?\" to which you must select the ALL USERS option. The OpenVPN connection will now display among the list of configurations. In the bottom-right corner of the Tunnelblick interface, click the Connect button. Wait for the connection to be established. You may receive a pair of warnings \u2014 which you can safely ignore. After connecting, you will be able to access the PowerVC GUI and SSH remotely into your PowerVC environment. Return to the \"Demo Ready Notification\" email (or the My Reservations tab on the ITZ) and follow the URL to your unique Project Kit page, similar to the one captured in the screenshot below. The Project Kit summarizes all of the relevant connection information you will need to access your PowerVC and Ansible environment. Scroll down the page until you reach the Usage Instructions table near the bottom of the page. The table contains two relevant rows: the first row \"PowerVC GUI\" contains information on how to connect to the PowerVC infrastructure; the second row \"Ansible ssh console\" details how to remotely connect to Ansible via SSH. You will be making use of both endpoints throughout the lab. As such, it's recommended that you copy for future reference the URLs for both the GUI and Ansible endpoints (note that they have different host addresses), as well as the userID and password values (they are identical across both environments). pwd Then check to see which version of Ansible the controller node is currently running: ansible --version Everything's now set and in good shape for you to get to work on deploying your first virtual machine via Ansible on to the PowerVC infrastructure.","title":"Setting up a VPN"},{"location":"Part%202/01%20Deploy%20a%20VM/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . VI CHEAT SHEET Throughout this lab, you will make extensive use of the VI text editor. If you're not familiar with this editor, you can quickly get up to speed using the following cheat sheet: https://www.cse.scu.edu/~yfang/coen11/vi-CheatSheet.pdf for reference. Ansible, and in particular YAML (Yet Another Markup Language), is very particular about indentation and formatting \u2014 something as trivial as an extra whitespace or an incorrectly-indented line of code can cause the interpreter to parse the instructions differently, resulting in outcomes you may not have intended. To streamline the lab as much as possible, a Git repository was created ahead of time with large portions of the Ansible scripts and constructs prepared ahead of time. You will still need to edit elements in each of these files, and the instructions to follow will guide you step by step (as though you were creating these documents from scratch yourself), but it's worth noting that by cloning the Git repository you will be saving yourself a lot of extra typing (and potential debugging). Everything is documented for you\u2014 so you can go about creating all of these documents and scripts from scratch, if you wish. Note that the cloned repository will be replicated to your ITZ virtual machine, not your local machine. If you are a SELLER , it is strongly recommended that you clone the Git repository, as it will save you time and keystrokes. If you are a TECHNICAL SELLER , it is recommended that you take the time to craft these files from scratch yourself and that you do not clone the Git repository. SELLERS Submit the following instruction to clone the prepared Git repository into your Ansible controller node: git clone --branch hybridcloudevent https://github.com/stephannavarro/ansiblewas.git TECHNICAL SELLERS You will need to manually create the ansiblewas directory yourself before continuing. This step was automatically performed for Sellers when they cloned the Git repository. You can do so by issuing the following instruction: mkdir ansiblewas ALL USERS Navigate to the newly-created ansiblewas directory. cd ansiblewas As a quick primer on how to use the VI editor: Navigate using the up/down and left/right arrows keys. Hover the blinking indicator over the point in the text you wish to modify. To start adding or deleting text, first press the I (as in \"indigo\") key and then begin adding text as normal. You can also paste lines of code that you have copied to your clipboard using CTRL+V (useful for the code blocks peppered throughout this documentation) or delete text using Backspace . Save your changes and exit a file by first pressing the ESC key, then typing :x (the full colon must come first) and hitting Return . If you want to exit a file without saving changes, press ESC and type :quit! (with the exclamation point included at the end) followed by Return . Other shortcuts and commands are detailed in the cheat sheet linked above. Within the configuration file, you will see three values of note: inventory , remote_tmp , and host_key_checking . Their respective purposes are as follows: inventory will instruct Ansible on which directory the host file should be defined (we will be modifying this file shortly). remote_tmp instructs which directory to use on the remote system (needed by the AIX operating system). host_key_checking tells SSH to accept remote keys (which will streamline the lab for us later). The next order of business is configuring the Ansible controller node (to which you are currently connected) with details about our PowerVC environment and how our project directories are organized. This can be done by modifying the ansible.cfg configuration file: vi ansible.cfg The ansible.cfg definition is provided below. for Technical Sellers who are crafting these files from scratch (instead of using the cloned Git repository). Sellers do not need to make any modification to the ansible.cfg file. Enter ESC followed by :quit! and Return in the VI editor to exit the file without making any changes to the code. [defaults] inventory = ./hosts remote_tmp = /tmp host_key_checking = False SELLERS As you are working from a cloned Git repository, the ansible.cfg file is already defined within your directory. You can inspect it using the vi ansible.cfg command mentioned above, but you do not need to modify or adjust the values inside the configuration file. Exit the VI editor without saving changes by pressing ESC followed by :quit! and Return . TECHNICAL SELLERS As you are crafting these files from scratch, you will need to copy the code ansible.cfg code block referenced above and save it by pressing ESC followed by :x and Return . We are now ready to install the Ansible OpenStack Python modules on to the Ansible controller node. The openstacksdk library is required in order for Ansible to be able to interact with the PowerVC infrastructure provisioned via the ITZ. The following command will take care of installing all of the necessary drivers and dependencies: pip3 install --user \"openstacksdk==0.51.0\" \"python-openstackclient==5.4.0\" dnspython dig With the dependencies taken care of, we're now ready to begin deployment of an AIX operating system partition atop of the PowerVC infrastructure provisioned earlier.","title":"Deploy a Virtual Machine"},{"location":"Part%202/01%20Deploy%20a%20VM/#_1","text":"","title":""},{"location":"Part%202/01%20Deploy%20a%20VM/#if-you-are-a-seller-it-is-strongly-recommended-that-you-clone-the-git-repository-as-it-will-save-you-time-and-keystrokes","text":"","title":"If you are a SELLER, it is strongly recommended that you clone the Git repository, as it will save you time and keystrokes."},{"location":"Part%202/01%20Deploy%20a%20VM/#if-you-are-a-technical-seller-it-is-recommended-that-you-take-the-time-to-craft-these-files-from-scratch-yourself-and-that-you-do-not-clone-the-git-repository","text":"SELLERS Submit the following instruction to clone the prepared Git repository into your Ansible controller node: git clone --branch hybridcloudevent https://github.com/stephannavarro/ansiblewas.git TECHNICAL SELLERS You will need to manually create the ansiblewas directory yourself before continuing. This step was automatically performed for Sellers when they cloned the Git repository. You can do so by issuing the following instruction: mkdir ansiblewas ALL USERS Navigate to the newly-created ansiblewas directory. cd ansiblewas As a quick primer on how to use the VI editor: Navigate using the up/down and left/right arrows keys. Hover the blinking indicator over the point in the text you wish to modify. To start adding or deleting text, first press the I (as in \"indigo\") key and then begin adding text as normal. You can also paste lines of code that you have copied to your clipboard using CTRL+V (useful for the code blocks peppered throughout this documentation) or delete text using Backspace . Save your changes and exit a file by first pressing the ESC key, then typing :x (the full colon must come first) and hitting Return . If you want to exit a file without saving changes, press ESC and type :quit! (with the exclamation point included at the end) followed by Return . Other shortcuts and commands are detailed in the cheat sheet linked above. Within the configuration file, you will see three values of note: inventory , remote_tmp , and host_key_checking . Their respective purposes are as follows: inventory will instruct Ansible on which directory the host file should be defined (we will be modifying this file shortly). remote_tmp instructs which directory to use on the remote system (needed by the AIX operating system). host_key_checking tells SSH to accept remote keys (which will streamline the lab for us later). The next order of business is configuring the Ansible controller node (to which you are currently connected) with details about our PowerVC environment and how our project directories are organized. This can be done by modifying the ansible.cfg configuration file: vi ansible.cfg The ansible.cfg definition is provided below. for Technical Sellers who are crafting these files from scratch (instead of using the cloned Git repository). Sellers do not need to make any modification to the ansible.cfg file. Enter ESC followed by :quit! and Return in the VI editor to exit the file without making any changes to the code. [defaults] inventory = ./hosts remote_tmp = /tmp host_key_checking = False SELLERS As you are working from a cloned Git repository, the ansible.cfg file is already defined within your directory. You can inspect it using the vi ansible.cfg command mentioned above, but you do not need to modify or adjust the values inside the configuration file. Exit the VI editor without saving changes by pressing ESC followed by :quit! and Return . TECHNICAL SELLERS As you are crafting these files from scratch, you will need to copy the code ansible.cfg code block referenced above and save it by pressing ESC followed by :x and Return . We are now ready to install the Ansible OpenStack Python modules on to the Ansible controller node. The openstacksdk library is required in order for Ansible to be able to interact with the PowerVC infrastructure provisioned via the ITZ. The following command will take care of installing all of the necessary drivers and dependencies: pip3 install --user \"openstacksdk==0.51.0\" \"python-openstackclient==5.4.0\" dnspython dig With the dependencies taken care of, we're now ready to begin deployment of an AIX operating system partition atop of the PowerVC infrastructure provisioned earlier.","title":"If you are a TECHNICAL SELLER, it is recommended that you take the time to craft these files from scratch yourself and that you do not clone the Git repository."},{"location":"Part%202/02%20Deploy%20an%20AIX%20Partition/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . The deployment of an AIX operating system partition on to the PowerVC infrastructure will be automated entirely via the AAP control (master) node. AAP will make use of: The .hosts definition created in the previous steps Playbooks that we will modify to paint the broad strokes for what automation AAP is to perform Built-in Modules (which are part of AAP's engine) for carrying out those instructions. Ansible OpenStack Modules \u2014 downloaded in the previous step \u2014will allow AAP to create an LPAR (logical partition or host) on the PowerVC infrastructure where the AIX operating system can reside. Begin modification of the OpenStack configuration file (located within your home directory on the Ansible control node) using the following instruction: vi clouds.yaml If you cloned the Git repository earlier, a template has already been crafted for you; otherwise, you will need to recreate it using the sample code below. SELLERS AND TECH SELLERS Both job roles will need to modify the cloud.yaml template to specifications matching your ITZ credentials and environment. The value idXXXXXXXX must be replaced with the username/ID that was recorded from the Project Kit. The same holds true for other variables or fields that have been bolded below in the sample script: if it is highlighted in red text within the screenshot, you must modify the clouds.yaml script for those fields to your own specifications and then save the changes before moving on. The clouds.yaml template should look like the following screenshot. Modify as necessary to match the specifications of your unique ITZ environment. Update the userID , password , project name ( ansiblewas ), and the host address (this address should match the PowerVC GUI address from the Project Kit). clouds: idXXXXXXXX: auth: auth_url: https://10.3.44.65:5000/v3/ domain_name: Default username: idXXXXXXXX password: Provided_password project_name: ansiblewas verify: false BE CAREFUL WITH INDENTATION AAP is very particular about indentation and nesting rules. In this example, every indentation level is denoted by two whitespaces. Also be sure to preserve the empty newline at the end of this example (the empty final line must be present within your YAML manifest.) After modifying and saving the clouds.yaml manifest file, we need to define the Playbook which Ansible will execute against. Modify (or create) the Playbook for generating a virtual machine via the following: vi mkvm.yaml As before, adjust the template as necessary: you will need to substitute your own values for: user gather_facts cloud public_key_file name key_name net-name KEYS ARE AUTOMATICALLY GENERATED The ansible_key_idXXXXXXXX and the public_key_file were created automatically for you by the IBM Technology Zone as part of your environment reservation. You do not need to generate or locate these files yourself \u2014 simply modify the idXXXXXXXX value to match your userID . The code template is available below for ease of copying and modifying your own variant: --- - hosts: localhost gather_facts: false vars: ansible_connection: local tasks: - name: adding ssh key to powervc os_keypair: cloud: idXXXXXXXX state: present name: ansible_key_idXXXXXXXX public_key_file: /home/idXXXXXXXX/.ssh/id_rsa.pub - name: Create a new VM instance os_server: cloud: idXXXXXXXX timeout: 900 state: present name: vmidXXXXXXXX image: AIX721_7022_300G_DEMO flavor: was key_name: ansible_key_idXXXXXXXX nics: - net-name: VLAN344 register: vm - name: Showing newly assigned IP address debug: msg: the IP address is \"{{ vm.server.public_v4 }}\" - name: Waits for SSH port 22 to open wait_for: host: \"{{ vm.server.public_v4 }}\" delay: 5 port: 22 sleep: 10 timeout: 900 os_server: name For the ' name ' field (line 11) you must include both vm + idXXXXXXXXX ( do not forget to prefix with vm ) in your manifest. The ' name ' variable will appear as BLANK when working from the Git repository clone \u2014 both sellers and technical sellers must complete this variable definition regardless of whether they are working from the Git repository clone or not. nics: net-name The ' net-name ' field must be set equal to VLAN344 , if it hasn't already been by default. Save and exit the mkvm.yaml Playbook once satisfied. Let's take a moment, before moving on, to parse out what some of these fields and modifications have done. os_keypair : Allows Ansible to upload your account's public SSH key to PowerVC, which will be used at deployment time to ensure that we won't need to use password authentication in the future. os_server : Creates the virtual machine on the cloud name defined within the clouds.yaml manifest file. debug : Will print to screen the IP address assigned to PowerVC once deployed. Record this information for later. wait_for : Ensures that the virtual machine has had time to boot up and the SSH port to be opened before re-enabling prompts from the terminal. Before we get started with execution of the Playbook, open a Web browser on your local machine and navigate to the PowerVC GUI URL (in the first row of the Project Kit table), supplying your userID and password from the same table when prompted to log in. This will load a dashboard overview of your PowerVC infrastructure which details all that is transpiring under the covers. Keep this tab open, as we can use it to track the progress of the virtual machine deployment. You may encounter a \"Connection is not private\" warning when attempting to access the website. Click \"visit this website\" at the bottom of the message (for Safari browsers), or ignore the warning if prompted to do so, and continue to the PowerVC GUI page. The dashboard will look similar to the one captured in the screenshot below. Time to execute the Playbook! Return to your Terminal console and submit the following: ansible-playbook mkvm.yaml -v While execution of the Playbook is underway, return to the PowerVC dashboard and click the VM List button from the taskbar on the left. Previously this tab would have displayed as empty. As the execution of the Playbook gets underway, a new virtual machine will be listed with the status of \" Building ;\" once the virtual machine has been deployed, the status will be adjusted to \" Active .\" If everything goes smoothly, a virtual machine will be deployed to PowerVC in a matter of minutes. If you encounter errors or things don't go as planned \u2014 don't panic. AAP, as warned about previously, is quite particular about things like indentation. A misplaced whitespace or a slipped finger on the keyboard can create a typo that will throw the script into disarray (after all, Ansible will try to execute your instructions exactly as you have written.) Go back into the scripts mentioned previously and verify that everything is correct and that all necessary substitutions have been made, then execute the ansible-playbook mkvm.yaml -v instruction a second time. HEALTH STATUS While provisioning of the VM is underway, you may notice that the State / Health of the VM temporarily displays a 'Warning' message. You can safely ignore the warning \u2014 but for those curious as to why: when you deploy a virtual machine, it remains in the Activating state until either Resource Monitoring and Control (RMC) becomes active or 20 minutes have passed. There are several reasons for the virtual machine to stay in the Activating state for 20 minutes and the health of the virtual machine shows that the RMC state is inactive. If you are using the activation engine or cloud-init activation packages, the most likely cause for RMC to be inactive is that the activation package did not configure the networking of the virtual machine. Once the build task has completed and the status is set to \" Active ,\" the IP field of the table will be populated with the virtual machine's address. Record this information for later. Return to the Terminal console where you have SSH'd into the AAP control node. Take note of the verbose logs that were returned for every stage of the Playbook execution. Within these logs you'll find details on various aspects of the virtual machine deployment, such as the Image ID (e.g. AIX721-7022-300G-DEMO ) for the AIX partition. If you return to the PowerVC dashboard and drill down into the Image List tab, you can locate the matching Image ID and inspect it for additional details. While you're on the dashboard, try exploring the Network ID (e.g. VL344 ) as well. Here you will find a table summarizing all of the networks defined with your PowerVC instance, including their VLAN IDs, Type, the number of VMs using that particular network connection, subnet masks, gateway IDs, and DNS server(s). Other areas of the PowerVC dashboard can also be explored, should you wish. When satisfied, we'll proceed with modifying the hosts file parameters on the Ansible control node using the newly-generated virtual machine IP address. The hosts file provides a list (an inventory, if you will) of the AIX partitions (the newly-generated virtual machine) where AAP is to execute Playbook tasks. Edit the hosts file using the following statement: vi hosts As before, use the template already cloned from Git (or craft your own) and substitute the placeholder IP address with the one associated with the newly-deployed AIX virtual machine. was: hosts: 10.3.44.XX: remote_tmp: /tmp/ WHAT IS WAS ? The was variable is in reference to the Compute Template used by our PowerVC virtual machine deployment; it was defined ahead of time for the ITZ environment specifically to meet the resource requirements for WebSphere Application Server ( was ). You can drill down into the Compute Template tab from the PowerVC dashboard if you wish to inspect further details about it. In the following section, we'll set the stage for a full deployment of WebSphere Application Server atop of the AIX VM that is now running on PowerVC infrastructure.","title":"Deploy an AIX Partition on PowerVC using Ansible"},{"location":"Part%203/01%20Laying%20the%20Groundwork/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . Preparations are complete and the groundwork has been set for a fully-automated installation and deployment of WebSphere Application Server (WAS) via AAP. At this stage, you have already used AAP to deploy a virtual machine with an AIX partition atop of PowerVC infrastructure. Additional configurations will need to be made to that partition to prepare it for hosting a WAS deployment within it. These types of configuration changes are precisely the type of operational work that can be easily automated by AAP, and a prime example of how businesses today are offloading administrative burdens through automation. In the following steps, you will instruct AAP to perform the following operations: Change root user characteristics using the power_aix Ansible modules , downloaded via Ansible Galaxy. Change the /tmp filesystem size to 6GB Change the /var filesystem size to 2GB Change the /opt filesystem size to 4GB Change the /usr filesystem size to 6GB Install additional software and libraries such as zip, unzip, and gnu tar Generate a WebSphere installation response file Upload WAS binaries Install WAS Create a WAS profile Start WAS To proceed, you will first need to download an IBM Power Systems collection for AIX on Power via the Ansible Galaxy repository. Roles are frequently published on the Ansible Galaxy community site ( https://galaxy.ansible.com ). Via communities such as Galaxy, thousands of Roles are available for AAP users to use within their own Playbooks. To install these on the AAP control node, invoke the following command using your SSH console: ansible-galaxy collection install ibm.power_aix Installation of the drivers should take only a moment to complete. Another handy feature of AAP is its ability to simplify how code is shared amongst teams, which traditionally becomes challenging and cumbersome at scale in the absence of automation. AAP employs a feature known as \" Roles \" which allow a developer to define a common set of configuration steps that can then be re-used repeatedly across multiple environments. Instead of having to coordinate across teams and share duplicate instructions with different groups, the developer can take the \"write once, run anywhere\" approach of defining an automation job a single time and then making repeated use of that code (consistently) across multiple environments. In our case, we will define an Ansible Role comprised of a set of tasks needed to configure a host (our AIX partition) for a service (WebSphere Application Server). Roles, like many other aspects of AAP, are defined using YAML files with a predefined directory structure. Roles provide a way for you to make it easier to reuse AAP code generically. You can package, in a standardized directory structure, all the tasks, variables, files, templates, and other resources needed to provision infrastructure or deploy applications. Administrators may copy that role from project to project simply by replicating the directory. They can then simply call (invoke) that role from a Play to execute it. Roles convey a number of other benefits to developers and administrators: Roles help to group content, allowing easy sharing of code with others Roles can be written that define the essential elements of a system type: web server, database server, Git repository, or other purpose Roles make larger projects more manageable Roles can be developed in parallel by different administrators The directory structure of a Role contains directories such as defaults, vars, tasks, files, templates, meta, and handlers \u2014 these are all \"expected\" directories (we can make use of all of them or only a subset) that Ansible Roles must be patterned against. Each directory must contain a main.yml file which provides the relevant content needed by AAP to execute a Playbook. Let's examine the purpose of each directory type, in turn: defaults : Contains default variables for the Role; variables by default have the lowest priority, so they are easy to override. vars : Contains variables for the Role; variables in vars have a higher priority than default variables. tasks : Contains the main list of steps to be executed by the Role. files : Contains files which must be copied over to the remote host. templates : Contains file templates that support modifications from the Role; in our lab work, we will use the Jinja2 templating language for creating templates. meta : Contains metadata for the Role, including the author, supported platforms, and dependencies. handlers : Contains handlers which can be invoked by \"notify\" directives; these are associated with the service. AAP supports variables that can be used to store values that can then be reused throughout files in an AAP project. Variables provide a convenient way to manage dynamic values for a given environment in your AAP project. This can simplify the creation and maintenance of a project, as well as mitigate the risk of errors introduced through typos or mislabeled items in your code. Variables might include: Users to create Packages to install Services to restart Files to remove Archives to retrieve from the internet We have yet to define the directory structures needed by Ansible Roles for our project, so let's tackle that step next. The directory structure you are to define in the steps ahead will look similar to the following diagram, with two distinct Roles names ( aix and was ), and subdirectories nestled within those parents. Execute the following instructions via your SSH console, line by line, to create the directory structure needed for the Roles. NAVIGATE TO THE CORRECT DIRECTORY FIRST Make sure you are sitting in the /ansiblewas directory before creating the following subdirectories! cd $HOME/ansiblewas mkdir -p roles/aix/tasks mkdir -p roles/aix/defaults mkdir -p roles/aix/templates mkdir -p roles/was/tasks mkdir -p roles/was/defaults mkdir -p roles/was/templates With AIX installed on the PowerVC LPAR (logical partition), you next need to modify root user settings associated with the virtual machine to increase the size of the filesystems available to it, as well as install additional dependencies and drivers needed for the environment. You will do so with modifications to the Roles associated with \" aix \" via the main.yml manifest file. Modify (or view) the YAML file using the following command: vi roles/aix/tasks/main.yml As before, you can either view the contents of the manifest (if you cloned the Github repository earlier) or craft a new one from scratch using the following template. No modifications to the template will be needed at this time. When satisfied, press ESC following by :x and Return to save your changes and exit the VI editor. --- - name: modifying root capabilities ibm.power_aix.user: state: modify name: root attributes: fsize: -1 cpu: -1 data: -1 stack: -1 core: -1 rss: -1 nofiles: -1 fsize_hard: -1 - name: Changes /tmp to 6G size aix_filesystem: filesystem: /tmp size: 6G state: present - name: Changes /var to 2G size aix_filesystem: filesystem: /var size: 2G state: present - name: Changes /opt to 4G size aix_filesystem: filesystem: /opt size: 4G state: present - name: Changes /usr to 6G aix_filesystem: filesystem: /usr size: 6G state: present - name: installing zip, unzip, GNUtar using yum yum: name: unzip, zip, tar-1.32-1 state: latest - name: Creating staging directory file: path: /tmp/im state: directory You are now prepared to craft the Playbook that Ansible will use to automate the workflow just defined for the aix Role. Use the following command to edit (or create) the was Playbook for WebSphere Application Server: vi was.yml As before, you can either view the contents of the manifest (if you cloned the Github repository earlier) or craft a new one from scratch using the following template. If you are working from the cloned template, you may have noticed that the last line of the YAML file ( #- role: was ) has been commented out \u2014 leave this unchanged for now, as you will be returning to it shortly. For now we are only concerned with the successful execution of the jobs associated with the aix Role. The template for was.yml is as follows: --- - hosts: was gather_facts: true user: root collections: - ibm.power_aix roles: - role: aix #- role: was Ansible facts are variables that are automatically discovered by Ansible on a managed host. Facts contain host-specific information that can be used just like regular variables in plays, conditionals, loops, or any other statement that depends on a value collected from a managed host. Facts are a convenient way to retrieve the state of a managed host and to determine what action to take based on that state. Some of the facts gathered for a managed host might include: The host name The kernel version The network interfaces The IP addresses The version of the operating system Various environment variables The number of CPUs The available amount of free memory The available amount of free disk space When satisfied, press ESC and then :x and Return to save and exit the file. Time to test the Playbook and Roles defined so far. Use the following command to execute the Playbook: ansible-playbook was.yml -v After execution, the Playbook should report back with a summary of jobs successfully completed (\" ok \"), changes made to the environment, jobs that have failed, and so on. If no jobs failed to execute, you are ready to proceed with the lab instructions; otherwise, return to the Roles definition and the Playbook YAML files to ensure that there are no scripting errors.","title":"Laying the Groundwork"},{"location":"Part%203/01%20Laying%20the%20Groundwork/#_1","text":"","title":""},{"location":"Part%203/01%20Laying%20the%20Groundwork/#another-handy-feature-of-aap-is-its-ability-to-simplify-how-code-is-shared-amongst-teams-which-traditionally-becomes-challenging-and-cumbersome-at-scale-in-the-absence-of-automation","text":"AAP employs a feature known as \" Roles \" which allow a developer to define a common set of configuration steps that can then be re-used repeatedly across multiple environments. Instead of having to coordinate across teams and share duplicate instructions with different groups, the developer can take the \"write once, run anywhere\" approach of defining an automation job a single time and then making repeated use of that code (consistently) across multiple environments. In our case, we will define an Ansible Role comprised of a set of tasks needed to configure a host (our AIX partition) for a service (WebSphere Application Server). Roles, like many other aspects of AAP, are defined using YAML files with a predefined directory structure. Roles provide a way for you to make it easier to reuse AAP code generically. You can package, in a standardized directory structure, all the tasks, variables, files, templates, and other resources needed to provision infrastructure or deploy applications. Administrators may copy that role from project to project simply by replicating the directory. They can then simply call (invoke) that role from a Play to execute it. Roles convey a number of other benefits to developers and administrators: Roles help to group content, allowing easy sharing of code with others Roles can be written that define the essential elements of a system type: web server, database server, Git repository, or other purpose Roles make larger projects more manageable Roles can be developed in parallel by different administrators The directory structure of a Role contains directories such as defaults, vars, tasks, files, templates, meta, and handlers \u2014 these are all \"expected\" directories (we can make use of all of them or only a subset) that Ansible Roles must be patterned against. Each directory must contain a main.yml file which provides the relevant content needed by AAP to execute a Playbook. Let's examine the purpose of each directory type, in turn: defaults : Contains default variables for the Role; variables by default have the lowest priority, so they are easy to override. vars : Contains variables for the Role; variables in vars have a higher priority than default variables. tasks : Contains the main list of steps to be executed by the Role. files : Contains files which must be copied over to the remote host. templates : Contains file templates that support modifications from the Role; in our lab work, we will use the Jinja2 templating language for creating templates. meta : Contains metadata for the Role, including the author, supported platforms, and dependencies. handlers : Contains handlers which can be invoked by \"notify\" directives; these are associated with the service. AAP supports variables that can be used to store values that can then be reused throughout files in an AAP project. Variables provide a convenient way to manage dynamic values for a given environment in your AAP project. This can simplify the creation and maintenance of a project, as well as mitigate the risk of errors introduced through typos or mislabeled items in your code. Variables might include: Users to create Packages to install Services to restart Files to remove Archives to retrieve from the internet We have yet to define the directory structures needed by Ansible Roles for our project, so let's tackle that step next. The directory structure you are to define in the steps ahead will look similar to the following diagram, with two distinct Roles names ( aix and was ), and subdirectories nestled within those parents. Execute the following instructions via your SSH console, line by line, to create the directory structure needed for the Roles. NAVIGATE TO THE CORRECT DIRECTORY FIRST Make sure you are sitting in the /ansiblewas directory before creating the following subdirectories! cd $HOME/ansiblewas mkdir -p roles/aix/tasks mkdir -p roles/aix/defaults mkdir -p roles/aix/templates mkdir -p roles/was/tasks mkdir -p roles/was/defaults mkdir -p roles/was/templates With AIX installed on the PowerVC LPAR (logical partition), you next need to modify root user settings associated with the virtual machine to increase the size of the filesystems available to it, as well as install additional dependencies and drivers needed for the environment. You will do so with modifications to the Roles associated with \" aix \" via the main.yml manifest file. Modify (or view) the YAML file using the following command: vi roles/aix/tasks/main.yml As before, you can either view the contents of the manifest (if you cloned the Github repository earlier) or craft a new one from scratch using the following template. No modifications to the template will be needed at this time. When satisfied, press ESC following by :x and Return to save your changes and exit the VI editor. --- - name: modifying root capabilities ibm.power_aix.user: state: modify name: root attributes: fsize: -1 cpu: -1 data: -1 stack: -1 core: -1 rss: -1 nofiles: -1 fsize_hard: -1 - name: Changes /tmp to 6G size aix_filesystem: filesystem: /tmp size: 6G state: present - name: Changes /var to 2G size aix_filesystem: filesystem: /var size: 2G state: present - name: Changes /opt to 4G size aix_filesystem: filesystem: /opt size: 4G state: present - name: Changes /usr to 6G aix_filesystem: filesystem: /usr size: 6G state: present - name: installing zip, unzip, GNUtar using yum yum: name: unzip, zip, tar-1.32-1 state: latest - name: Creating staging directory file: path: /tmp/im state: directory You are now prepared to craft the Playbook that Ansible will use to automate the workflow just defined for the aix Role. Use the following command to edit (or create) the was Playbook for WebSphere Application Server: vi was.yml As before, you can either view the contents of the manifest (if you cloned the Github repository earlier) or craft a new one from scratch using the following template. If you are working from the cloned template, you may have noticed that the last line of the YAML file ( #- role: was ) has been commented out \u2014 leave this unchanged for now, as you will be returning to it shortly. For now we are only concerned with the successful execution of the jobs associated with the aix Role. The template for was.yml is as follows: --- - hosts: was gather_facts: true user: root collections: - ibm.power_aix roles: - role: aix #- role: was Ansible facts are variables that are automatically discovered by Ansible on a managed host. Facts contain host-specific information that can be used just like regular variables in plays, conditionals, loops, or any other statement that depends on a value collected from a managed host. Facts are a convenient way to retrieve the state of a managed host and to determine what action to take based on that state. Some of the facts gathered for a managed host might include: The host name The kernel version The network interfaces The IP addresses The version of the operating system Various environment variables The number of CPUs The available amount of free memory The available amount of free disk space When satisfied, press ESC and then :x and Return to save and exit the file. Time to test the Playbook and Roles defined so far. Use the following command to execute the Playbook: ansible-playbook was.yml -v After execution, the Playbook should report back with a summary of jobs successfully completed (\" ok \"), changes made to the environment, jobs that have failed, and so on. If no jobs failed to execute, you are ready to proceed with the lab instructions; otherwise, return to the Roles definition and the Playbook YAML files to ensure that there are no scripting errors.","title":"Another handy feature of AAP is its ability to simplify how code is shared amongst teams, which traditionally becomes challenging and cumbersome at scale in the absence of automation."},{"location":"Part%203/02%20Creating%20Roles%20for%20WAS/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . As with the aix Roles previously, you will need to craft a workflow of automation tasks that WebSphere Application Server (WAS) will require for a full deployment, covering a variety of tasks: uploading and decompressing the WAS binaries, preparing the Installation Manager, the generation of WAS binaries, the installation of WAS itself, the creation of a WAS profile, and starting up the WAS services. All of these tasks will be defined once, and made repeatable and fully automated for the future, using the was Role that you will now define. The following Ansible Modules will be invoked as part of the sequence of jobs and tasks that the automation engine performs: unarchive : Uploads files (tar, zip, tgz, ...) and decompresses them on a target system. shell : Allows the execution of commands on a target system. template : Processed by the Jinja2 templating language and used for generating dynamic files. copy : Uploads files to a target system. First, return to the was.yml Playbook that was defined earlier: vi was.yml Sellers: recall that the Git-cloned template had a commented-out line towards the end of the YAML definition: this line - role: was will link the new was Role (which you will define momentarily) to the litany of operations that the Ansible Playbook will perform and interact with. SELLERS If you cloned the Git template previously, un-comment the line by deleting the # symbol. Otherwise, if you crafted the YAML file from scratch, add the instruction to the end of your Playbook. The final version of the Playbook should mirror the following template: --- - hosts: was gather_facts: true user: root collections: - ibm.power_aix roles: - role: aix - role: was Press ESC and then :x and Return to save and exit the was.yml file. ATTENTION In the instructions to follow, you will be asked to gradually add more automation jobs to the was Roles that you just defined. You have two options for how to proceed here: Take advantage of the Git-cloned repository, which contains the fully-completed YAML definition, ready for immediate execution. This is the recommended path for those with Seller responsibilities. Go through and add the following jobs one at a time, in sequence, testing execution of the Playbook at each stage. This route will allow you to incrementally make changes to the Roles, test the results with the Playbook, and see for yourself the gradual progression of the installation and deployment of WebSphere Application Server. This is the recommended path for those with Technical Seller responsibilities. Either path is appropriate, so tailor it to your job role or interests. Good luck!","title":"Creating Roles for WAS"},{"location":"Part%203/03%20Staging%20and%20Execution/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . The first task that Ansible's automation will need to tackle is creation of a staging directory, where the WAS Installation Manager binaries can be downloaded and unpackaged. Begin by using the VI editor to create (or modify/examine) the main.yml Roles via the following command: vi roles/was/tasks/main.yml The /tmp/im directory will be the path designated for this purpose. 6 GB SCALING In an earlier section of this lab, you'll recall that we increased the size of this directory to 6 GB in anticipation of the added capacity needs. Once the temporary directory has been created, the Installation Manager source files will be replicated to that endpoint. The creates: statement instructs Ansible to ignore the file upload request if the data is already replicated. This will be useful on repeat executions of the Playbook, as Ansible will not attempt to duplicate the download on subsequent (repeated) runs. The third job will execute the Installation Manager and accept the end-user license for use of the product. main.yml Technical Sellers : As you are defining the file from scratch, your YAML file will need to mirror the template below. Sellers : Since you are working from a Git-cloned repository, you will not need to modify the existing file. You may notice that there are additional lines of code beyond what is shown below \u2014 ignore those for now. We will gradually build up to this complete version of the YAML file as the lab work progresses. --- - name: Creating staging directory file: path: /tmp/im state: directory - name: copying IM source files unarchive: src: /files/aix/websphere/InstallationManager/1.8.9.4/aix.gtk.ppc_1.8.9004.20190423_2015.zip dest: /tmp/im creates: /tmp/im/userinstc.ini - name: installing installation manager shell: /tmp/im/installc -log /tmp/im.lof -acceptLicense SELLERS If you are a SELLER (or are working with the Git-cloned template), execution of the Playbook at this time will result in the full end-to-end deployment of WAS. For that reason, it is recommend that you DO NOT execute the was.yml Playbook until the conclusion of Part 3. TECHNICAL SELLERS If you wish, you can test the Roles defined so far by executing the Playbook. You can repeat this step following every modification to the main.yml manifest. Ansible will take note of the additions or alterations made to the job sequence, repeating steps if necessary but avoiding redundant work (if a job has previously been executed). By the conclusion of this lab, all of the jobs necessary to fully install and deploy WebSphere Application Server will be in place and have been executed. The Playbook can be executed at any time using the following instruction: ansible-playbook was.yml -v When satisfied, press ESC followed by :x and then Return to save and exit the file.","title":"Creating the Staging Directory for WAS, Copying Source Files, and Executing the Installer"},{"location":"Part%203/04%20Creating%20a%20Template/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . WebSphere Installation Manager requires an XML file (known as a response file ) to detail where the installation should take place, the version of WAS to be installed, the versions of Java and other dependencies, and so on. The file must be located inside of the roles/was/templates directory and titled was90501.sdk8035.xml for the purposes of this lab. The directory structure will look like the following: AAP has a number of modules that can be used to modify existing files. These include lineinfile and blockinfile , among others. However, they are not always easy to use effectively and correctly. A much more powerful way to manage files is to template them. With this method, you can write a template configuration file that is automatically customized for the managed host when the file is deployed, using Ansible variables and facts . This can be easier to control and is less error-prone. Ansible uses the Jinja2 templating system for template files. Ansible also uses Jinja2 syntax to reference variables in Playbooks, and as such it will look structurally similar to what you have seen previously with YAML-based Playbooks. A Jinja2 template is composed of multiple elements: data, variables, and expressions. Those variables and expressions are replaced with their values when the Jinja2 template is rendered. You will see an example of this shortly after we execute the Playbook and compare how the variables defined within the XML file are changed. The variables of note, specific to this environment, are highlighted in the screenshot below with red text. You do not need to modify this template from how it is written \u2014 these variables are highlighted only to showcase what is different from the standard Installation Manager boilerplate. Your XML file must mirror the following template before continuing with the hands-on material. <?xml version='1.0' encoding='UTF-8'?> <agent-input> <variables> <variable name='sharedLocation' value='/usr/IBM/IMShared'/> </variables> <server> <repository location='{{was_repo}}{{was_90501_file}}'/> <repository location='{{was_repo}}{{sdk_8035_file}}'/> </server> <profile id='IBM WebSphere Application Server V9.0' installLocation='/usr/IBM/WebSphere/AppServer'> <data key='cic.selector.arch' value='ppc64'/> <data key='cic.selector.ws' value='gtk'/> </profile> <install> <!-- IBM WebSphere Application Server 9.0.5.1 --> <offering profile='IBM WebSphere Application Server V9.0' id='com.ibm.websphere.BASE.v90' version='9.0.5001.20190828_0616' features='core.feature,ejbdeploy,thinclient,embeddablecontainer'/> <!-- IBM SDK, Java Technology Edition, Version 8 8.0.5.35 --> <offering profile='IBM WebSphere Application Server V9.0' id='com.ibm.java.jdk.v8' version='8.0.5035.20190422_0948' features='com.ibm.sdk.8'/> </install> <preference name='com.ibm.cic.common.core.preferences.eclipseCache' value='${sharedLocation}'/> </agent-input> Edit (or create) the XML response file by executing the following command: vi roles/was/templates/was90501.sdk8035.xml was90501.sdk8035.xml Technical Sellers : Replicate the code template above and create the XML file. Sellers : Leave the XML file unmodified. When satisfied, press ESC followed by :x and Return to save and edit the file. Now you must set default variables for the WAS Roles, which will be used later when generating the response file for the Installation Manager. The YAML file definition should mirror the following: was_repo: /tmp/wasrepo/ was_90501_file: was.repo.90501.base.zip sdk_8035_file: sdk.repo.8035.java8.aix.zip was_90501_source_dir: /files/aix/websphere/was/was9051/ sdk_8035_source_dir: /files/aix/websphere/sdk/sdk8035/ Edit (or create) the following YAML template file: vi roles/was/defaults/main.yml roles/was/defaults/main.yml Technical Sellers : Replicate the code template above and create the YAML file. Sellers : Leave the YAML file unmodified. You are now ready to make additional modifications to the primary Playbook, instructing Ansible to generate and upload the template for WAS. The extensions to the Playbook will create a directory was_repo: /tmp/wasrepo/ and then instruct Ansible to upload WAS binaries to the target system. --- - name: Creating staging directory file: path: /tmp/im state: directory - name: copying IM source files unarchive: src: /files/aix/websphere/InstallationManager/1.8.9.4/aix.gtk.ppc_1.8.9004.20190423_2015.zip dest: /tmp/im creates: /tmp/im/userinstc.ini - name: installing installation manager shell: /tmp/im/installc -log /tmp/im.lof -acceptLicense - name: uploading was installation response file template: src: templates/was90501.sdk8035.xml dest: /tmp/was90501.sdk8035.xml - name: Creating wasrepo directory file: path: \"{{was_repo}}\" state: directory - name: copying binaries to wasrepo copy: src: \"{{item}}\" dest: \"{{was_repo}}\" loop: - \"{{was_90501_source_dir}}{{was_90501_file}}\" - \"{{sdk_8035_source_dir}}{{sdk_8035_file}}\" Instruct the VI editor to open the Playbook with the same command used before: vi roles/was/tasks/main.yml roles/was/tasks/main.yml Technical Sellers : Extend the Playbook to resemble the following template. Sellers : Leave the completed Playbook unmodified. Press ESC followed by :x and Return to save and exit the Playbook. Using loops saves administrators from having to write multiple tasks (repetitively and redundantly) to make use of the same module(s). For example, instead of writing five tasks to ensure five users exist, you can write one task that iterates over a list of five users to ensure they all exist. Ansible supports iterating a task over a set of items using the loop keyword. You can configure loops to repeat a task using each item in a list, the contents of each of the files in a list, a generated sequence of numbers, or using more complicated structures. TECHNICAL SELLERS As before, you can execute the Playbook at this stage to carry out the new modifications that have been added since the last execution. ansible-playbook was.yml -v","title":"Creation of a Template"},{"location":"Part%203/05%20Launching%20WAS/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . Further modifications to the primary Playbook are required to complete the installation of WAS, generate the necessary profiles, and fully launch the software. Once again, edit the Playbook YAML manifest: vi roles/was/defaults/main.yml main.yml Technical Sellers : Extend the YAML file as you have done previously so that the final version matches the template documented below. Sellers : As you are working from a completed YAML file that was cloned from the Git repository, you do not need to make any modifications to the file. The finalized main.yml Playbook should exactly mirror the following template: --- - name: Creating staging directory file: path: /tmp/im state: directory - name: copying IM source files unarchive: src: /files/aix/websphere/InstallationManager/1.8.9.4/aix.gtk.ppc_1.8.9004.20190423_2015.zip dest: /tmp/im creates: /tmp/im/userinstc.ini - name: installing installation manager shell: /tmp/im/installc -log /tmp/im.lof -acceptLicense - name: uploading was installation response file template: src: templates/was90501.sdk8035.xml dest: /tmp/was90501.sdk8035.xml - name: Creating wasrepo directory file: path: \"{{was_repo}}\" state: directory - name: copying binaries to wasrepo copy: src: \"{{item}}\" dest: \"{{was_repo}}\" loop: - \"{{was_90501_source_dir}}{{was_90501_file}}\" - \"{{sdk_8035_source_dir}}{{sdk_8035_file}}\" - name: installing was using Installation manager shell: /opt/IBM/InstallationManager/eclipse/tools/imcl input /tmp/was90501.sdk8035.xml -acceptlicense tags: template - name: creating was profile shell: /usr/IBM/WebSphere/AppServer/bin/manageprofiles.sh -create -templatePath /usr/IBM/WebSphere/AppServer/profileTemplates/default tags: template - name: starting application server shell: /usr/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startServer.sh server1 tags: template When satisfied, press ESC followed by :x and Return to save and exit the YAML file. Finally, execute the following Playbook to kick off the end-to-end deployment of WebSphere Application Server: ansible-playbook was.yml -v SELLERS AND TECHNICAL SELLERS This step must be performed by both Sellers and Technical Sellers . Wait until the Playbook has finished executing and the \" PLAY RECAP \" has been printed to screen within the Terminal console. Successful execution of the full Playbook may take several minutes to complete. If all jobs have successfully been executed (with status as \" OK \"), then WebSphere Application Server should now be successfully installed on the AIX LPAR and the services now live for you to interact with! Test that WebSphere Application Server is now online by visiting the following address with your Web browser: http://10.3.XX.XX:9060/ibm/console HOST ADDRESS Substitute the missing variables with the IP address of your AIX LPAR (this is the address summarized just below the PLAY RECAP in the screenshot above) \u2014 remember to use the address unique to your environment. Ensure that you are still connected to the OpenVPN tunnel before attempting to access the WAS service. You may input any userID that you wish (remember that we disabled authentication in an earlier step) and then click Log In to access the WAS dashboard. Congratulations \u2014 you have successfully installed and deployed a WebSphere Application Server environment on PowerVC entirely using Red Hat Ansible Automation Platform! BUSINESS PARTNERS Keep your browser window open to the WAS dashboard. The series of questions in Part 4 will be repeated on your L3 accreditation quiz . Use this time to investigate the various areas of the WAS dashboard so that you can prepare for the quiz and quickly certify your completion of this hands-on material. IBM SELLERS AND TECHNICAL SELLERS Begin planning how you wish to present and record your Stand & Deliver . Replicate the steps and lessons learned throughout this hands-on material and ensure that your recording meets all of the evaluation criteria outlined in the Stand & Deliver requirements .","title":"Installation of WAS, Creation of a Profile, and Launching the Software"},{"location":"Part%203/05%20Launching%20WAS/#_1","text":"","title":""},{"location":"Part%203/05%20Launching%20WAS/#congratulations-you-have-successfully-installed-and-deployed-a-websphere-application-server-environment-on-powervc-entirely-using-red-hat-ansible-automation-platform","text":"BUSINESS PARTNERS Keep your browser window open to the WAS dashboard. The series of questions in Part 4 will be repeated on your L3 accreditation quiz . Use this time to investigate the various areas of the WAS dashboard so that you can prepare for the quiz and quickly certify your completion of this hands-on material. IBM SELLERS AND TECHNICAL SELLERS Begin planning how you wish to present and record your Stand & Deliver . Replicate the steps and lessons learned throughout this hands-on material and ensure that your recording meets all of the evaluation criteria outlined in the Stand & Deliver requirements .","title":"Congratulations \u2014 you have successfully installed and deployed a WebSphere Application Server environment on PowerVC entirely using Red Hat Ansible Automation Platform!"},{"location":"Part%204/01%20Business%20Partner%20Accreditation/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . Business Partners must pass an accreditation quiz after completing the hands-on work. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. The quiz questions are based on elements of the WebSphere Application Server (WAS) web dashboard, which you will be asked to investigate and record specific details about. The WAS environment and dashboard will be available to you after you have successfully concluded the lab work \u2014 remaining online until your ITZ reservation has expired. EXPIRING ENVIRONMENTS Note that the ITZ environment can only be reserved for 4 hours at a time. After this period, the instance will automatically be retired and decommissioned. It is strongly recommended that you complete your investigations for the quiz questions (below) before that time has expired. If not, you will need to run through the lab work another time to bring the WAS environment back online. Record your answers now so that you can quickly answer the accreditation quiz questions later . HINT! The screenshots below have been modified to obscure the relevant fields, but the orange boxes give you a good idea for where to find the answers on the WAS dashboard. On the Welcome screen presented after logging into the WebSphere Application Server dashboard, a Suite Name and Version of the environment are presented center-screen. What is the Version number of the environment that Ansible has deployed? Drilling down into the Applications tab on the left of the WebSphere Application Server dashboard, click the Global Deployment Settings page. This page configures and monitors directories to automatically deploy applications. What is the address of the default \" Monitored Directory \"? Drilling down into the Security tab on the left of the WebSphere Application Server dashboard, click the Global Security page. Under the Authentication field, there are a variety of options available to choose from. Which of the \" Authentication mechanisms and expiration \" is enabled by default? Drilling down into the Environment tab on the left of the WebSphere Application Server dashboard, click the Virtual Hosts page. Here you can create a virtual host with a unique set of web access ports. What is the name of a Virtual Host that is available by default with your WebSphere Application Server deployment? Drilling down into the Security tab on the left of the WebSphere Application Server dashboard, click the Administrative Group Roles page. Here you can manage the administrative permissions assigned to groups. What is the name of a Group that is available by default with your WebSphere Application Server deployment? Drilling down into the Monitoring and Tuning tab on the left of the WebSphere Application Server dashboard, click the Performance Monitoring Infrastructure (PMI) page. Of the resources being monitored, there is one (' server1 ') available by default. What is the Host Name of that server?","title":"Business Partner Accreditation"},{"location":"Part%204/01%20Business%20Partner%20Accreditation/#_1","text":"","title":""},{"location":"Part%204/01%20Business%20Partner%20Accreditation/#business-partners-must-pass-an-accreditation-quiz-after-completing-the-hands-on-work","text":"The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. The quiz questions are based on elements of the WebSphere Application Server (WAS) web dashboard, which you will be asked to investigate and record specific details about. The WAS environment and dashboard will be available to you after you have successfully concluded the lab work \u2014 remaining online until your ITZ reservation has expired. EXPIRING ENVIRONMENTS Note that the ITZ environment can only be reserved for 4 hours at a time. After this period, the instance will automatically be retired and decommissioned. It is strongly recommended that you complete your investigations for the quiz questions (below) before that time has expired. If not, you will need to run through the lab work another time to bring the WAS environment back online. Record your answers now so that you can quickly answer the accreditation quiz questions later . HINT! The screenshots below have been modified to obscure the relevant fields, but the orange boxes give you a good idea for where to find the answers on the WAS dashboard.","title":"Business Partners must pass an accreditation quiz after completing the hands-on work."},{"location":"Part%204/01%20Business%20Partner%20Accreditation/#_2","text":"","title":""},{"location":"Part%204/01%20Business%20Partner%20Accreditation/#_3","text":"","title":""},{"location":"Part%204/01%20Business%20Partner%20Accreditation/#_4","text":"On the Welcome screen presented after logging into the WebSphere Application Server dashboard, a Suite Name and Version of the environment are presented center-screen. What is the Version number of the environment that Ansible has deployed? Drilling down into the Applications tab on the left of the WebSphere Application Server dashboard, click the Global Deployment Settings page. This page configures and monitors directories to automatically deploy applications. What is the address of the default \" Monitored Directory \"? Drilling down into the Security tab on the left of the WebSphere Application Server dashboard, click the Global Security page. Under the Authentication field, there are a variety of options available to choose from. Which of the \" Authentication mechanisms and expiration \" is enabled by default? Drilling down into the Environment tab on the left of the WebSphere Application Server dashboard, click the Virtual Hosts page. Here you can create a virtual host with a unique set of web access ports. What is the name of a Virtual Host that is available by default with your WebSphere Application Server deployment? Drilling down into the Security tab on the left of the WebSphere Application Server dashboard, click the Administrative Group Roles page. Here you can manage the administrative permissions assigned to groups. What is the name of a Group that is available by default with your WebSphere Application Server deployment? Drilling down into the Monitoring and Tuning tab on the left of the WebSphere Application Server dashboard, click the Performance Monitoring Infrastructure (PMI) page. Of the resources being monitored, there is one (' server1 ') available by default. What is the Host Name of that server?","title":""},{"location":"Part%204/02%20IBMer%20Accreditation/","text":"WAYS TO WATCH In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . IBM Sellers and Technical Sellers must develop and record a Stand & Deliver presentation. This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to. The recording will then cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered through this lab. IBMers will be evaluated by First Line Manager (FLM). Instructions on how to submit a Stand & Deliver via Allego are included on the YourLearning coursework page . The evaluation criteria that your FLM will weigh your performance against are as follows: Seller articulated client's pain point (s) and the value proposition of using Ansible Automation Platform. Seller highlighted use cases for Ansible Automation Platform. Seller demonstrated and discussed several of the key differentiated capabilities of Ansible Automation Platform that deliver on the value proposition on (1) . Seller highlighted benefits to the client (this is the why the client can\u2019t live without these benefits section). Seller highlighted benefits to the client's customers (what will the client be able to deliver to their customers that they could not without this product). Seller closed the demo with a call to action for the client that could include: a workshop, a deeper dive into the product meeting, MVP engagements, and so on. KEYS TO SUCCESS Be sure to incorporate each of these themes and topics into your Stand & Deliver recording, touching on each of them as you run through an end-to-end delivery of the full lab. Good luck!","title":"IBM Seller and Technical Seller Accreditation"},{"location":"Part%204/02%20IBMer%20Accreditation/#_1","text":"","title":""},{"location":"Part%204/02%20IBMer%20Accreditation/#ibm-sellers-and-technical-sellers-must-develop-and-record-a-stand-deliver-presentation","text":"This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to. The recording will then cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered through this lab. IBMers will be evaluated by First Line Manager (FLM). Instructions on how to submit a Stand & Deliver via Allego are included on the YourLearning coursework page . The evaluation criteria that your FLM will weigh your performance against are as follows: Seller articulated client's pain point (s) and the value proposition of using Ansible Automation Platform. Seller highlighted use cases for Ansible Automation Platform. Seller demonstrated and discussed several of the key differentiated capabilities of Ansible Automation Platform that deliver on the value proposition on (1) . Seller highlighted benefits to the client (this is the why the client can\u2019t live without these benefits section). Seller highlighted benefits to the client's customers (what will the client be able to deliver to their customers that they could not without this product). Seller closed the demo with a call to action for the client that could include: a workshop, a deeper dive into the product meeting, MVP engagements, and so on. KEYS TO SUCCESS Be sure to incorporate each of these themes and topics into your Stand & Deliver recording, touching on each of them as you run through an end-to-end delivery of the full lab. Good luck!","title":"IBM Sellers and Technical Sellers must develop and record a Stand &amp; Deliver presentation."}]}